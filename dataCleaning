import requests
import pandas as pd

class Book:
    def __init__(self, Name, PublishYear, Rating, ISBN, cover_url="", subjects=None):
        self.Name = Name
        self.PublishYear = PublishYear
        self.Rating = Rating
        self.ISBN = ISBN
        self.cover_url = cover_url
        self.subjects = subjects if subjects else []

    def __repr__(self):
        return (f"Book(Name={self.Name}, PublishYear={self.PublishYear}, "
                f"Rating={self.Rating}, ISBN={self.ISBN}, "
                f"cover_url={self.cover_url}, "
                f"subjects={self.subjects})")

# Read the CSV, using only required columns and specifying types
file_path = 'books.csv'
df = pd.read_csv(file_path, low_memory=False)

# Convert DataFrame to a list of Book objects
books = []
for index, row in df.iterrows():
    book = Book(
        Name=row['Name'],
        PublishYear=row['PublishYear'],
        Rating=row['Rating'],
        ISBN=row['ISBN']
    )
    books.append(book)

# API calls to get cover URLs and subjects
for book in books:
    if book.ISBN:
        url = f"http://openlibrary.org/api/volumes/brief/isbn/{book.ISBN}.json"
        headers = {
            "User-Agent": "PageTurner/1.0 (rebeccaborissov@gmail.com)"
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if 'records' in data:
                for record_id, record_data in data['records'].items():
                    # Get cover URL (if present)
                    data_section = record_data.get('data', {})
                    if data_section:
                        cover = data_section.get('cover', {})
                        book.cover_url = cover.get('large', "")

                        # Get subjects from data section (if present)
                        subjects = data_section.get('subjects', [])
                        book.subjects.extend([subject['name'] for subject in subjects if
                                              isinstance(subject, dict) and 'name' in subject])

                    # Get subjects from details section (if present)
                    details_section = record_data.get('details', {}).get('details', {})
                    if details_section:
                        subjects = details_section.get('subjects', [])
                        book.subjects.extend([subject for subject in subjects if isinstance(subject, str)])

                    break  # Get data from the first record only

    # Remove duplicates and sort subjects
    book.subjects = sorted(list(set(book.subjects)))

# Create a new DataFrame from updated Book objects
new_df = pd.DataFrame([
    {'Name': book.Name, 'PublishYear': book.PublishYear, 'Rating': book.Rating,
     'ISBN': book.ISBN, 'cover_url': book.cover_url, 'subjects': ', '.join(book.subjects)}
    for book in books
])

# Write the DataFrame to a new CSV file
new_df.to_csv('bookDataCleaned.csv', index=False)
print("Data saved to 'bookDataCleaned.csv'")
